[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pysec"
version = "0.1.0"
description = "FOSS Endpoint Security"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
authors = [{ name = "Martin Thoma", email = "info@martin-thoma.de" }]
maintainers = [{ name = "Martin Thoma", email = "info@martin-thoma.de" }]
keywords = [
    "security",
    "endpoint-security",
    "vulnerability-scanning",
    "cve",
    "system-monitoring",
    "compliance",
    "audit"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Framework :: Django :: 5.1",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed"
]
dependencies = [
    "appdirs",
    "cryptography",
    "django>=5.1.0",
    "django-extensions",
    "django_rest_framework",
    "drf-spectacular",
    "pydantic",
    "requests",
    "rich",
    "typer[all]",
]

[project.optional-dependencies]
dev = ["pytest", "ruff", "pre-commit", "mypy", "pytest-coverage", "types-requests", "httpx", "pytest-django"]

[project.urls]
Homepage = "https://github.com/MartinThoma/pysec"
Repository = "https://github.com/MartinThoma/pysec.git"
Documentation = "https://github.com/MartinThoma/pysec/tree/main/docs"
"Bug Tracker" = "https://github.com/MartinThoma/pysec/issues"
"Source Code" = "https://github.com/MartinThoma/pysec"

[project.scripts]
pysec = "pysec.cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["pysec*"]

[tool.setuptools.package-data]
"pysec.server" = [
    "templates/**/*"
]
[tool.mypy]
ignore_missing_imports = true

[tool.ruff]
line-length = 89

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A004",  # Import `print` is shadowing a Python builtin
    "ANN002", #  Missing type annotation for `*args`
    "ANN003", #  Missing type annotation for `**kwargs`
    "BLE001",  # Do not catch blind exception: `Exception`
    "COM812",  # Conflicts with 'ruff format'
    "D101", #  Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D104", #  Missing docstring in public package
    "D105",  # Missing docstring in magic method"
    "D107",  # Missing docstring in `__init__` - I prefer documenting the class
    "D203",  # `incorrect-blank-line-before-class`
    "D212",    # I want multiline-docstrings to start at the second line
    "D401", # First line of docstring should be in imperative mood
    "EM101",  # Exception must not use a string literal, assign to variable first
    "FA100",  # Add `from __future__ import annotations` to simplify `typing.Optional`
    "FA102",  # Missing `from __future__ import annotations`, but uses PEP 604 union
    "G004",  # Logging statement uses f-string
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PLW2901",  # `for` loop variable `line` overwritten by assignment target
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "S110",  # `try`-`except`-`pass` detected, consider logging the exception
    "S112", # `try`-`except`-`continue` detected, consider logging the exception
    "S603",  # `subprocess` call: check for execution of untrusted input
    "S607",  # Starting a process with a partial executable path
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300", #  Consider moving this statement to an `else` block
    "UP045",  # Introduced an error with typer
    "UP017",  # Seems broken
]


[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "INP001",
    "D103", # Missing docstring in public function
    "S101",  # Use of `assert` detected
    "ARG001",  # Unused function argument clashes with pytest fixtures
    "ANN001",  # Missing type annotation for function argument - also bad for fixtures
    "PLR0913",  # Too many arguments in function definition
    ]
"main.py" = [
    "B008",  # Do not perform function call `typer.Option` in argument defaults
]
"pysec/server/app.py" = [
    "B008",  # Do not perform function call in argument defaults
    "S106",  # Possible hardcoded password
]
"pysec/server/models.py" = [
    "D106",  # Missing docstring in public nested class
]
"pysec/server/serializers.py" = [
    "D106",  # Missing docstring in public nested class
]
"pysec/server/views.py" = [
    "E501",  # Line too long - can happen with spectacular decorators
]
"pysec/server/auth.py" = [
    "S106",  # Possible hardcoded password
]
"pysec/server/migrations/*" = [
    "D100",  # Missing docstring in public module
]
"pysec/cli/*" = [
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT003", # Boolean positional value in function call
    "B008",  # Do not perform function call in argument defaults
]
"pysec/cli/client.py" = [
    "B008",  # Do not perform function call in argument defaults
]
"database.py" = [
    "PLR0913",  # Too many arguments in function definition (6 > 5)
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.test_settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = "--tb=short --strict-markers"
markers = [
    "django_db: mark test to use Django database."
]
